'use client';

/**
 * This file was automatically generated by the Stencil React Output Target.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

/* eslint-disable */

import type { EventName, StencilReactComponent } from '@stencil/react-output-target/runtime';
import { createComponent } from '@stencil/react-output-target/runtime';
import { type EditorChangeEvent, type JeDropzoneCustomEvent, type JeFormCustomEvent, type JeOverlayCustomEvent, type JeRichTextCustomEvent, type OverlayData } from "jebamo";
import { JeAccordion as JeAccordionElement, defineCustomElement as defineJeAccordion } from "jebamo/components/je-accordion.js";
import { JeAlert as JeAlertElement, defineCustomElement as defineJeAlert } from "jebamo/components/je-alert.js";
import { JeBranch as JeBranchElement, defineCustomElement as defineJeBranch } from "jebamo/components/je-branch.js";
import { JeBreadcrumb as JeBreadcrumbElement, defineCustomElement as defineJeBreadcrumb } from "jebamo/components/je-breadcrumb.js";
import { JeBreadcrumbs as JeBreadcrumbsElement, defineCustomElement as defineJeBreadcrumbs } from "jebamo/components/je-breadcrumbs.js";
import { JeButtonGroup as JeButtonGroupElement, defineCustomElement as defineJeButtonGroup } from "jebamo/components/je-button-group.js";
import { JeButton as JeButtonElement, defineCustomElement as defineJeButton } from "jebamo/components/je-button.js";
import { JeCalendar as JeCalendarElement, defineCustomElement as defineJeCalendar } from "jebamo/components/je-calendar.js";
import { JeCard as JeCardElement, defineCustomElement as defineJeCard } from "jebamo/components/je-card.js";
import { JeCheckbox as JeCheckboxElement, defineCustomElement as defineJeCheckbox } from "jebamo/components/je-checkbox.js";
import { JeColor as JeColorElement, defineCustomElement as defineJeColor } from "jebamo/components/je-color.js";
import { JeControl as JeControlElement, defineCustomElement as defineJeControl } from "jebamo/components/je-control.js";
import { JeDatepicker as JeDatepickerElement, defineCustomElement as defineJeDatepicker } from "jebamo/components/je-datepicker.js";
import { JeDetails as JeDetailsElement, defineCustomElement as defineJeDetails } from "jebamo/components/je-details.js";
import { JeDiscardForm as JeDiscardFormElement, defineCustomElement as defineJeDiscardForm } from "jebamo/components/je-discard-form.js";
import { JeDivider as JeDividerElement, defineCustomElement as defineJeDivider } from "jebamo/components/je-divider.js";
import { JeDropzone as JeDropzoneElement, defineCustomElement as defineJeDropzone } from "jebamo/components/je-dropzone.js";
import { JeForm as JeFormElement, defineCustomElement as defineJeForm } from "jebamo/components/je-form.js";
import { JeGrid as JeGridElement, defineCustomElement as defineJeGrid } from "jebamo/components/je-grid.js";
import { JeIcon as JeIconElement, defineCustomElement as defineJeIcon } from "jebamo/components/je-icon.js";
import { JeItem as JeItemElement, defineCustomElement as defineJeItem } from "jebamo/components/je-item.js";
import { JeKnob as JeKnobElement, defineCustomElement as defineJeKnob } from "jebamo/components/je-knob.js";
import { JeLabel as JeLabelElement, defineCustomElement as defineJeLabel } from "jebamo/components/je-label.js";
import { JeLink as JeLinkElement, defineCustomElement as defineJeLink } from "jebamo/components/je-link.js";
import { JeList as JeListElement, defineCustomElement as defineJeList } from "jebamo/components/je-list.js";
import { JeLoading as JeLoadingElement, defineCustomElement as defineJeLoading } from "jebamo/components/je-loading.js";
import { JeNote as JeNoteElement, defineCustomElement as defineJeNote } from "jebamo/components/je-note.js";
import { JeOption as JeOptionElement, defineCustomElement as defineJeOption } from "jebamo/components/je-option.js";
import { JeOverlayContent as JeOverlayContentElement, defineCustomElement as defineJeOverlayContent } from "jebamo/components/je-overlay-content.js";
import { JeOverlay as JeOverlayElement, defineCustomElement as defineJeOverlay } from "jebamo/components/je-overlay.js";
import { JePage as JePageElement, defineCustomElement as defineJePage } from "jebamo/components/je-page.js";
import { JePill as JePillElement, defineCustomElement as defineJePill } from "jebamo/components/je-pill.js";
import { JePlaceholder as JePlaceholderElement, defineCustomElement as defineJePlaceholder } from "jebamo/components/je-placeholder.js";
import { JePopover as JePopoverElement, defineCustomElement as defineJePopover } from "jebamo/components/je-popover.js";
import { JeRadioButton as JeRadioButtonElement, defineCustomElement as defineJeRadioButton } from "jebamo/components/je-radio-button.js";
import { JeRadioGroup as JeRadioGroupElement, defineCustomElement as defineJeRadioGroup } from "jebamo/components/je-radio-group.js";
import { JeRadio as JeRadioElement, defineCustomElement as defineJeRadio } from "jebamo/components/je-radio.js";
import { JeRange as JeRangeElement, defineCustomElement as defineJeRange } from "jebamo/components/je-range.js";
import { JeReorderItem as JeReorderItemElement, defineCustomElement as defineJeReorderItem } from "jebamo/components/je-reorder-item.js";
import { JeReorderList as JeReorderListElement, defineCustomElement as defineJeReorderList } from "jebamo/components/je-reorder-list.js";
import { JeRichText as JeRichTextElement, defineCustomElement as defineJeRichText } from "jebamo/components/je-rich-text.js";
import { JeSelect as JeSelectElement, defineCustomElement as defineJeSelect } from "jebamo/components/je-select.js";
import { JeSplitPanel as JeSplitPanelElement, defineCustomElement as defineJeSplitPanel } from "jebamo/components/je-split-panel.js";
import { JeSplitView as JeSplitViewElement, defineCustomElement as defineJeSplitView } from "jebamo/components/je-split-view.js";
import { JeStack as JeStackElement, defineCustomElement as defineJeStack } from "jebamo/components/je-stack.js";
import { JeTab as JeTabElement, defineCustomElement as defineJeTab } from "jebamo/components/je-tab.js";
import { JeTabs as JeTabsElement, defineCustomElement as defineJeTabs } from "jebamo/components/je-tabs.js";
import { JeTextfield as JeTextfieldElement, defineCustomElement as defineJeTextfield } from "jebamo/components/je-textfield.js";
import { JeToggle as JeToggleElement, defineCustomElement as defineJeToggle } from "jebamo/components/je-toggle.js";
import { JeToolbar as JeToolbarElement, defineCustomElement as defineJeToolbar } from "jebamo/components/je-toolbar.js";
import { JeTooltip as JeTooltipElement, defineCustomElement as defineJeTooltip } from "jebamo/components/je-tooltip.js";
import { JeTree as JeTreeElement, defineCustomElement as defineJeTree } from "jebamo/components/je-tree.js";
import { JeWizard as JeWizardElement, defineCustomElement as defineJeWizard } from "jebamo/components/je-wizard.js";
import React from 'react';

export type JeAccordionEvents = NonNullable<unknown>;

export const JeAccordion: StencilReactComponent<JeAccordionElement, JeAccordionEvents> = /*@__PURE__*/ createComponent<JeAccordionElement, JeAccordionEvents>({
    tagName: 'je-accordion',
    elementClass: JeAccordionElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeAccordionEvents,
    defineCustomElement: defineJeAccordion
});

export type JeAlertEvents = {
    onPresent: EventName<CustomEvent<any>>,
    onDismiss: EventName<CustomEvent<any>>
};

export const JeAlert: StencilReactComponent<JeAlertElement, JeAlertEvents> = /*@__PURE__*/ createComponent<JeAlertElement, JeAlertEvents>({
    tagName: 'je-alert',
    elementClass: JeAlertElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onPresent: 'present',
        onDismiss: 'dismiss'
    } as JeAlertEvents,
    defineCustomElement: defineJeAlert
});

export type JeBranchEvents = NonNullable<unknown>;

export const JeBranch: StencilReactComponent<JeBranchElement, JeBranchEvents> = /*@__PURE__*/ createComponent<JeBranchElement, JeBranchEvents>({
    tagName: 'je-branch',
    elementClass: JeBranchElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeBranchEvents,
    defineCustomElement: defineJeBranch
});

export type JeBreadcrumbEvents = NonNullable<unknown>;

export const JeBreadcrumb: StencilReactComponent<JeBreadcrumbElement, JeBreadcrumbEvents> = /*@__PURE__*/ createComponent<JeBreadcrumbElement, JeBreadcrumbEvents>({
    tagName: 'je-breadcrumb',
    elementClass: JeBreadcrumbElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeBreadcrumbEvents,
    defineCustomElement: defineJeBreadcrumb
});

export type JeBreadcrumbsEvents = { onExpandClick: EventName<CustomEvent<any>> };

export const JeBreadcrumbs: StencilReactComponent<JeBreadcrumbsElement, JeBreadcrumbsEvents> = /*@__PURE__*/ createComponent<JeBreadcrumbsElement, JeBreadcrumbsEvents>({
    tagName: 'je-breadcrumbs',
    elementClass: JeBreadcrumbsElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onExpandClick: 'expandClick' } as JeBreadcrumbsEvents,
    defineCustomElement: defineJeBreadcrumbs
});

export type JeButtonEvents = NonNullable<unknown>;

export const JeButton: StencilReactComponent<JeButtonElement, JeButtonEvents> = /*@__PURE__*/ createComponent<JeButtonElement, JeButtonEvents>({
    tagName: 'je-button',
    elementClass: JeButtonElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeButtonEvents,
    defineCustomElement: defineJeButton
});

export type JeButtonGroupEvents = NonNullable<unknown>;

export const JeButtonGroup: StencilReactComponent<JeButtonGroupElement, JeButtonGroupEvents> = /*@__PURE__*/ createComponent<JeButtonGroupElement, JeButtonGroupEvents>({
    tagName: 'je-button-group',
    elementClass: JeButtonGroupElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeButtonGroupEvents,
    defineCustomElement: defineJeButtonGroup
});

export type JeCalendarEvents = NonNullable<unknown>;

export const JeCalendar: StencilReactComponent<JeCalendarElement, JeCalendarEvents> = /*@__PURE__*/ createComponent<JeCalendarElement, JeCalendarEvents>({
    tagName: 'je-calendar',
    elementClass: JeCalendarElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeCalendarEvents,
    defineCustomElement: defineJeCalendar
});

export type JeCardEvents = NonNullable<unknown>;

export const JeCard: StencilReactComponent<JeCardElement, JeCardEvents> = /*@__PURE__*/ createComponent<JeCardElement, JeCardEvents>({
    tagName: 'je-card',
    elementClass: JeCardElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeCardEvents,
    defineCustomElement: defineJeCard
});

export type JeCheckboxEvents = { onValueChange: EventName<CustomEvent<boolean | undefined>> };

export const JeCheckbox: StencilReactComponent<JeCheckboxElement, JeCheckboxEvents> = /*@__PURE__*/ createComponent<JeCheckboxElement, JeCheckboxEvents>({
    tagName: 'je-checkbox',
    elementClass: JeCheckboxElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onValueChange: 'valueChange' } as JeCheckboxEvents,
    defineCustomElement: defineJeCheckbox
});

export type JeColorEvents = NonNullable<unknown>;

export const JeColor: StencilReactComponent<JeColorElement, JeColorEvents> = /*@__PURE__*/ createComponent<JeColorElement, JeColorEvents>({
    tagName: 'je-color',
    elementClass: JeColorElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeColorEvents,
    defineCustomElement: defineJeColor
});

export type JeControlEvents = NonNullable<unknown>;

export const JeControl: StencilReactComponent<JeControlElement, JeControlEvents> = /*@__PURE__*/ createComponent<JeControlElement, JeControlEvents>({
    tagName: 'je-control',
    elementClass: JeControlElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeControlEvents,
    defineCustomElement: defineJeControl
});

export type JeDatepickerEvents = { onValueChange: EventName<CustomEvent<number>> };

export const JeDatepicker: StencilReactComponent<JeDatepickerElement, JeDatepickerEvents> = /*@__PURE__*/ createComponent<JeDatepickerElement, JeDatepickerEvents>({
    tagName: 'je-datepicker',
    elementClass: JeDatepickerElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onValueChange: 'valueChange' } as JeDatepickerEvents,
    defineCustomElement: defineJeDatepicker
});

export type JeDetailsEvents = {
    onExpand: EventName<CustomEvent<any>>,
    onCollapse: EventName<CustomEvent<any>>
};

export const JeDetails: StencilReactComponent<JeDetailsElement, JeDetailsEvents> = /*@__PURE__*/ createComponent<JeDetailsElement, JeDetailsEvents>({
    tagName: 'je-details',
    elementClass: JeDetailsElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onExpand: 'expand',
        onCollapse: 'collapse'
    } as JeDetailsEvents,
    defineCustomElement: defineJeDetails
});

export type JeDiscardFormEvents = NonNullable<unknown>;

export const JeDiscardForm: StencilReactComponent<JeDiscardFormElement, JeDiscardFormEvents> = /*@__PURE__*/ createComponent<JeDiscardFormElement, JeDiscardFormEvents>({
    tagName: 'je-discard-form',
    elementClass: JeDiscardFormElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeDiscardFormEvents,
    defineCustomElement: defineJeDiscardForm
});

export type JeDividerEvents = NonNullable<unknown>;

export const JeDivider: StencilReactComponent<JeDividerElement, JeDividerEvents> = /*@__PURE__*/ createComponent<JeDividerElement, JeDividerEvents>({
    tagName: 'je-divider',
    elementClass: JeDividerElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeDividerEvents,
    defineCustomElement: defineJeDivider
});

export type JeDropzoneEvents = { onDataDrop: EventName<JeDropzoneCustomEvent<DataTransfer>> };

export const JeDropzone: StencilReactComponent<JeDropzoneElement, JeDropzoneEvents> = /*@__PURE__*/ createComponent<JeDropzoneElement, JeDropzoneEvents>({
    tagName: 'je-dropzone',
    elementClass: JeDropzoneElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onDataDrop: 'dataDrop' } as JeDropzoneEvents,
    defineCustomElement: defineJeDropzone
});

export type JeFormEvents = { onFormData: EventName<JeFormCustomEvent<Record<string, any>>> };

export const JeForm: StencilReactComponent<JeFormElement, JeFormEvents> = /*@__PURE__*/ createComponent<JeFormElement, JeFormEvents>({
    tagName: 'je-form',
    elementClass: JeFormElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onFormData: 'formData' } as JeFormEvents,
    defineCustomElement: defineJeForm
});

export type JeGridEvents = NonNullable<unknown>;

export const JeGrid: StencilReactComponent<JeGridElement, JeGridEvents> = /*@__PURE__*/ createComponent<JeGridElement, JeGridEvents>({
    tagName: 'je-grid',
    elementClass: JeGridElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeGridEvents,
    defineCustomElement: defineJeGrid
});

export type JeIconEvents = NonNullable<unknown>;

export const JeIcon: StencilReactComponent<JeIconElement, JeIconEvents> = /*@__PURE__*/ createComponent<JeIconElement, JeIconEvents>({
    tagName: 'je-icon',
    elementClass: JeIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeIconEvents,
    defineCustomElement: defineJeIcon
});

export type JeItemEvents = NonNullable<unknown>;

export const JeItem: StencilReactComponent<JeItemElement, JeItemEvents> = /*@__PURE__*/ createComponent<JeItemElement, JeItemEvents>({
    tagName: 'je-item',
    elementClass: JeItemElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeItemEvents,
    defineCustomElement: defineJeItem
});

export type JeKnobEvents = NonNullable<unknown>;

export const JeKnob: StencilReactComponent<JeKnobElement, JeKnobEvents> = /*@__PURE__*/ createComponent<JeKnobElement, JeKnobEvents>({
    tagName: 'je-knob',
    elementClass: JeKnobElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeKnobEvents,
    defineCustomElement: defineJeKnob
});

export type JeLabelEvents = NonNullable<unknown>;

export const JeLabel: StencilReactComponent<JeLabelElement, JeLabelEvents> = /*@__PURE__*/ createComponent<JeLabelElement, JeLabelEvents>({
    tagName: 'je-label',
    elementClass: JeLabelElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeLabelEvents,
    defineCustomElement: defineJeLabel
});

export type JeLinkEvents = NonNullable<unknown>;

export const JeLink: StencilReactComponent<JeLinkElement, JeLinkEvents> = /*@__PURE__*/ createComponent<JeLinkElement, JeLinkEvents>({
    tagName: 'je-link',
    elementClass: JeLinkElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeLinkEvents,
    defineCustomElement: defineJeLink
});

export type JeListEvents = NonNullable<unknown>;

export const JeList: StencilReactComponent<JeListElement, JeListEvents> = /*@__PURE__*/ createComponent<JeListElement, JeListEvents>({
    tagName: 'je-list',
    elementClass: JeListElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeListEvents,
    defineCustomElement: defineJeList
});

export type JeLoadingEvents = NonNullable<unknown>;

export const JeLoading: StencilReactComponent<JeLoadingElement, JeLoadingEvents> = /*@__PURE__*/ createComponent<JeLoadingElement, JeLoadingEvents>({
    tagName: 'je-loading',
    elementClass: JeLoadingElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeLoadingEvents,
    defineCustomElement: defineJeLoading
});

export type JeNoteEvents = NonNullable<unknown>;

export const JeNote: StencilReactComponent<JeNoteElement, JeNoteEvents> = /*@__PURE__*/ createComponent<JeNoteElement, JeNoteEvents>({
    tagName: 'je-note',
    elementClass: JeNoteElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeNoteEvents,
    defineCustomElement: defineJeNote
});

export type JeOptionEvents = NonNullable<unknown>;

export const JeOption: StencilReactComponent<JeOptionElement, JeOptionEvents> = /*@__PURE__*/ createComponent<JeOptionElement, JeOptionEvents>({
    tagName: 'je-option',
    elementClass: JeOptionElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeOptionEvents,
    defineCustomElement: defineJeOption
});

export type JeOverlayEvents = {
    onPresent: EventName<CustomEvent<any>>,
    onDismiss: EventName<JeOverlayCustomEvent<OverlayData>>
};

export const JeOverlay: StencilReactComponent<JeOverlayElement, JeOverlayEvents> = /*@__PURE__*/ createComponent<JeOverlayElement, JeOverlayEvents>({
    tagName: 'je-overlay',
    elementClass: JeOverlayElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onPresent: 'present',
        onDismiss: 'dismiss'
    } as JeOverlayEvents,
    defineCustomElement: defineJeOverlay
});

export type JeOverlayContentEvents = NonNullable<unknown>;

export const JeOverlayContent: StencilReactComponent<JeOverlayContentElement, JeOverlayContentEvents> = /*@__PURE__*/ createComponent<JeOverlayContentElement, JeOverlayContentEvents>({
    tagName: 'je-overlay-content',
    elementClass: JeOverlayContentElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeOverlayContentEvents,
    defineCustomElement: defineJeOverlayContent
});

export type JePageEvents = NonNullable<unknown>;

export const JePage: StencilReactComponent<JePageElement, JePageEvents> = /*@__PURE__*/ createComponent<JePageElement, JePageEvents>({
    tagName: 'je-page',
    elementClass: JePageElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JePageEvents,
    defineCustomElement: defineJePage
});

export type JePillEvents = NonNullable<unknown>;

export const JePill: StencilReactComponent<JePillElement, JePillEvents> = /*@__PURE__*/ createComponent<JePillElement, JePillEvents>({
    tagName: 'je-pill',
    elementClass: JePillElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JePillEvents,
    defineCustomElement: defineJePill
});

export type JePlaceholderEvents = NonNullable<unknown>;

export const JePlaceholder: StencilReactComponent<JePlaceholderElement, JePlaceholderEvents> = /*@__PURE__*/ createComponent<JePlaceholderElement, JePlaceholderEvents>({
    tagName: 'je-placeholder',
    elementClass: JePlaceholderElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JePlaceholderEvents,
    defineCustomElement: defineJePlaceholder
});

export type JePopoverEvents = {
    onWillPresent: EventName<CustomEvent<any>>,
    onPresent: EventName<CustomEvent<any>>,
    onDismiss: EventName<CustomEvent<any>>,
    onWillDismiss: EventName<CustomEvent<any>>,
    onReady: EventName<CustomEvent<any>>
};

export const JePopover: StencilReactComponent<JePopoverElement, JePopoverEvents> = /*@__PURE__*/ createComponent<JePopoverElement, JePopoverEvents>({
    tagName: 'je-popover',
    elementClass: JePopoverElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onWillPresent: 'willPresent',
        onPresent: 'present',
        onDismiss: 'dismiss',
        onWillDismiss: 'willDismiss',
        onReady: 'ready'
    } as JePopoverEvents,
    defineCustomElement: defineJePopover
});

export type JeRadioEvents = NonNullable<unknown>;

export const JeRadio: StencilReactComponent<JeRadioElement, JeRadioEvents> = /*@__PURE__*/ createComponent<JeRadioElement, JeRadioEvents>({
    tagName: 'je-radio',
    elementClass: JeRadioElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeRadioEvents,
    defineCustomElement: defineJeRadio
});

export type JeRadioButtonEvents = NonNullable<unknown>;

export const JeRadioButton: StencilReactComponent<JeRadioButtonElement, JeRadioButtonEvents> = /*@__PURE__*/ createComponent<JeRadioButtonElement, JeRadioButtonEvents>({
    tagName: 'je-radio-button',
    elementClass: JeRadioButtonElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeRadioButtonEvents,
    defineCustomElement: defineJeRadioButton
});

export type JeRadioGroupEvents = { onValueChange: EventName<CustomEvent<any>> };

export const JeRadioGroup: StencilReactComponent<JeRadioGroupElement, JeRadioGroupEvents> = /*@__PURE__*/ createComponent<JeRadioGroupElement, JeRadioGroupEvents>({
    tagName: 'je-radio-group',
    elementClass: JeRadioGroupElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onValueChange: 'valueChange' } as JeRadioGroupEvents,
    defineCustomElement: defineJeRadioGroup
});

export type JeRangeEvents = NonNullable<unknown>;

export const JeRange: StencilReactComponent<JeRangeElement, JeRangeEvents> = /*@__PURE__*/ createComponent<JeRangeElement, JeRangeEvents>({
    tagName: 'je-range',
    elementClass: JeRangeElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeRangeEvents,
    defineCustomElement: defineJeRange
});

export type JeReorderItemEvents = NonNullable<unknown>;

export const JeReorderItem: StencilReactComponent<JeReorderItemElement, JeReorderItemEvents> = /*@__PURE__*/ createComponent<JeReorderItemElement, JeReorderItemEvents>({
    tagName: 'je-reorder-item',
    elementClass: JeReorderItemElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeReorderItemEvents,
    defineCustomElement: defineJeReorderItem
});

export type JeReorderListEvents = NonNullable<unknown>;

export const JeReorderList: StencilReactComponent<JeReorderListElement, JeReorderListEvents> = /*@__PURE__*/ createComponent<JeReorderListElement, JeReorderListEvents>({
    tagName: 'je-reorder-list',
    elementClass: JeReorderListElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeReorderListEvents,
    defineCustomElement: defineJeReorderList
});

export type JeRichTextEvents = {
    onEditorChange: EventName<JeRichTextCustomEvent<EditorChangeEvent>>,
    onEditorFocus: EventName<JeRichTextCustomEvent<FocusEvent>>,
    onEditorBlur: EventName<JeRichTextCustomEvent<FocusEvent>>
};

export const JeRichText: StencilReactComponent<JeRichTextElement, JeRichTextEvents> = /*@__PURE__*/ createComponent<JeRichTextElement, JeRichTextEvents>({
    tagName: 'je-rich-text',
    elementClass: JeRichTextElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onEditorChange: 'editorChange',
        onEditorFocus: 'editorFocus',
        onEditorBlur: 'editorBlur'
    } as JeRichTextEvents,
    defineCustomElement: defineJeRichText
});

export type JeSelectEvents = { onValueChange: EventName<CustomEvent<any>> };

export const JeSelect: StencilReactComponent<JeSelectElement, JeSelectEvents> = /*@__PURE__*/ createComponent<JeSelectElement, JeSelectEvents>({
    tagName: 'je-select',
    elementClass: JeSelectElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onValueChange: 'valueChange' } as JeSelectEvents,
    defineCustomElement: defineJeSelect
});

export type JeSplitPanelEvents = NonNullable<unknown>;

export const JeSplitPanel: StencilReactComponent<JeSplitPanelElement, JeSplitPanelEvents> = /*@__PURE__*/ createComponent<JeSplitPanelElement, JeSplitPanelEvents>({
    tagName: 'je-split-panel',
    elementClass: JeSplitPanelElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeSplitPanelEvents,
    defineCustomElement: defineJeSplitPanel
});

export type JeSplitViewEvents = NonNullable<unknown>;

export const JeSplitView: StencilReactComponent<JeSplitViewElement, JeSplitViewEvents> = /*@__PURE__*/ createComponent<JeSplitViewElement, JeSplitViewEvents>({
    tagName: 'je-split-view',
    elementClass: JeSplitViewElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeSplitViewEvents,
    defineCustomElement: defineJeSplitView
});

export type JeStackEvents = NonNullable<unknown>;

export const JeStack: StencilReactComponent<JeStackElement, JeStackEvents> = /*@__PURE__*/ createComponent<JeStackElement, JeStackEvents>({
    tagName: 'je-stack',
    elementClass: JeStackElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeStackEvents,
    defineCustomElement: defineJeStack
});

export type JeTabEvents = NonNullable<unknown>;

export const JeTab: StencilReactComponent<JeTabElement, JeTabEvents> = /*@__PURE__*/ createComponent<JeTabElement, JeTabEvents>({
    tagName: 'je-tab',
    elementClass: JeTabElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeTabEvents,
    defineCustomElement: defineJeTab
});

export type JeTabsEvents = { onValueChange: EventName<CustomEvent<string | undefined>> };

export const JeTabs: StencilReactComponent<JeTabsElement, JeTabsEvents> = /*@__PURE__*/ createComponent<JeTabsElement, JeTabsEvents>({
    tagName: 'je-tabs',
    elementClass: JeTabsElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onValueChange: 'valueChange' } as JeTabsEvents,
    defineCustomElement: defineJeTabs
});

export type JeTextfieldEvents = { onValueChange: EventName<CustomEvent<any>> };

export const JeTextfield: StencilReactComponent<JeTextfieldElement, JeTextfieldEvents> = /*@__PURE__*/ createComponent<JeTextfieldElement, JeTextfieldEvents>({
    tagName: 'je-textfield',
    elementClass: JeTextfieldElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onValueChange: 'valueChange' } as JeTextfieldEvents,
    defineCustomElement: defineJeTextfield
});

export type JeToggleEvents = { onValueChange: EventName<CustomEvent<boolean>> };

export const JeToggle: StencilReactComponent<JeToggleElement, JeToggleEvents> = /*@__PURE__*/ createComponent<JeToggleElement, JeToggleEvents>({
    tagName: 'je-toggle',
    elementClass: JeToggleElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onValueChange: 'valueChange' } as JeToggleEvents,
    defineCustomElement: defineJeToggle
});

export type JeToolbarEvents = NonNullable<unknown>;

export const JeToolbar: StencilReactComponent<JeToolbarElement, JeToolbarEvents> = /*@__PURE__*/ createComponent<JeToolbarElement, JeToolbarEvents>({
    tagName: 'je-toolbar',
    elementClass: JeToolbarElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeToolbarEvents,
    defineCustomElement: defineJeToolbar
});

export type JeTooltipEvents = NonNullable<unknown>;

export const JeTooltip: StencilReactComponent<JeTooltipElement, JeTooltipEvents> = /*@__PURE__*/ createComponent<JeTooltipElement, JeTooltipEvents>({
    tagName: 'je-tooltip',
    elementClass: JeTooltipElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as JeTooltipEvents,
    defineCustomElement: defineJeTooltip
});

export type JeTreeEvents = { onValueChange: EventName<CustomEvent<string | string[]>> };

export const JeTree: StencilReactComponent<JeTreeElement, JeTreeEvents> = /*@__PURE__*/ createComponent<JeTreeElement, JeTreeEvents>({
    tagName: 'je-tree',
    elementClass: JeTreeElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onValueChange: 'valueChange' } as JeTreeEvents,
    defineCustomElement: defineJeTree
});

export type JeWizardEvents = {
    onStepChange: EventName<CustomEvent<number>>,
    onFinish: EventName<CustomEvent<void>>
};

export const JeWizard: StencilReactComponent<JeWizardElement, JeWizardEvents> = /*@__PURE__*/ createComponent<JeWizardElement, JeWizardEvents>({
    tagName: 'je-wizard',
    elementClass: JeWizardElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onStepChange: 'stepChange',
        onFinish: 'finish'
    } as JeWizardEvents,
    defineCustomElement: defineJeWizard
});
