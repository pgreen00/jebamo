/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { PanelState } from "./components/je-page/je-page";
export { PanelState } from "./components/je-page/je-page";
export namespace Components {
    interface JeAlert {
    }
    interface JeButton {
        /**
          * Predefined colors
         */
        "color": 'primary' | 'secondary' | 'tertiary' | 'success' | 'error' | 'warning' | 'medium' | 'light' | 'dark';
        /**
          * Disables button
         */
        "disabled": boolean;
        /**
          * Expands the button to the full width of it's container
         */
        "expand": boolean;
        /**
          * Button fill
         */
        "fill": 'solid' | 'outline' | 'clear';
        /**
          * Removes the padding, ideal for turning an icon or image into a button
         */
        "iconOnly": boolean;
        /**
          * Button size
         */
        "size": 'md' | 'lg' | 'sm';
        /**
          * Can set to submit or reset to participate in forms
         */
        "type": string;
    }
    interface JeCard {
    }
    interface JeCheckbox {
    }
    interface JeCheckboxGroup {
    }
    interface JeCheckboxOption {
    }
    interface JeColumn {
    }
    interface JeColumnGroup {
    }
    interface JeForm {
    }
    interface JeIcon {
        /**
          * Whether or not the icon should be filled
         */
        "fill"?: boolean;
        /**
          * Icon grade
         */
        "grade"?: number;
        /**
          * Google material icon name
         */
        "icon": string;
        /**
          * Size of the icon
         */
        "size": 'sm' | 'md' | 'lg' | 'xl';
        /**
          * Icon weight
         */
        "weight"?: number;
    }
    interface JeInfinite {
    }
    interface JeInput {
        "expand"?: boolean;
        "label"?: string;
        "placeholder"?: string;
    }
    interface JeItem {
    }
    interface JeLoading {
    }
    interface JeModal {
    }
    interface JePage {
        "leftPanel": PanelState;
        "rightPanel": PanelState;
        "theme": 'light' | 'dark' | 'auto';
    }
    interface JePill {
    }
    interface JePopover {
        /**
          * Backdrop will dismiss the popover on click when enabled
         */
        "backdropDismiss": boolean;
        /**
          * Manually dismisses the popover. Role and data get passed to the didDismiss event.
         */
        "dismiss": (role?: string, data?: any) => Promise<void>;
        /**
          * Popover will automatically dismiss itself when something is clicked in the popover when enabled
         */
        "dismissOnClick": boolean;
        /**
          * Used by uss-select
         */
        "getContentHeight": () => Promise<number>;
        /**
          * Horizontal offset used when auto positioning the popover content
         */
        "offsetX": number;
        /**
          * Vertical offset used when auto positioning the popover content
         */
        "offsetY": number;
        /**
          * If the popover should auto position itself using the mouse event or the triggerElement.
         */
        "position": 'click' | 'element';
        /**
          * Used internally to present the popover. Can also be used to manually present it if needed. Will auto position itself using the last click event on the window. Can optionally override the click event;
         */
        "present": (event?: MouseEvent | null) => Promise<void>;
        /**
          * Whether or not the backdrop will be visible to the user
         */
        "showBackdrop": boolean;
        /**
          * The id of the element that will present the menu on click. If not provided, you will have to manually present the popover using present().
         */
        "trigger"?: string;
        /**
          * @click Popover will show on left click or tap on mobile.
          * @context-menu Popover will show on right click or press on mobile.
          * @hover Popover will show on hover or tap on mobile. No backdrop will be rendered.
         */
        "triggerAction": 'click' | 'hover' | 'context-menu';
    }
    interface JeRadio {
    }
    interface JeRadioGroup {
    }
    interface JeSelect {
    }
    interface JeSelectOption {
    }
    interface JeSkeletonText {
    }
    interface JeTab {
    }
    interface JeTabs {
    }
    interface JeTextarea {
    }
    interface JeToast {
    }
    interface JeToggle {
    }
    interface JeToolbar {
    }
}
export interface JePopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLJePopoverElement;
}
declare global {
    interface HTMLJeAlertElement extends Components.JeAlert, HTMLStencilElement {
    }
    var HTMLJeAlertElement: {
        prototype: HTMLJeAlertElement;
        new (): HTMLJeAlertElement;
    };
    interface HTMLJeButtonElement extends Components.JeButton, HTMLStencilElement {
    }
    var HTMLJeButtonElement: {
        prototype: HTMLJeButtonElement;
        new (): HTMLJeButtonElement;
    };
    interface HTMLJeCardElement extends Components.JeCard, HTMLStencilElement {
    }
    var HTMLJeCardElement: {
        prototype: HTMLJeCardElement;
        new (): HTMLJeCardElement;
    };
    interface HTMLJeCheckboxElement extends Components.JeCheckbox, HTMLStencilElement {
    }
    var HTMLJeCheckboxElement: {
        prototype: HTMLJeCheckboxElement;
        new (): HTMLJeCheckboxElement;
    };
    interface HTMLJeCheckboxGroupElement extends Components.JeCheckboxGroup, HTMLStencilElement {
    }
    var HTMLJeCheckboxGroupElement: {
        prototype: HTMLJeCheckboxGroupElement;
        new (): HTMLJeCheckboxGroupElement;
    };
    interface HTMLJeCheckboxOptionElement extends Components.JeCheckboxOption, HTMLStencilElement {
    }
    var HTMLJeCheckboxOptionElement: {
        prototype: HTMLJeCheckboxOptionElement;
        new (): HTMLJeCheckboxOptionElement;
    };
    interface HTMLJeColumnElement extends Components.JeColumn, HTMLStencilElement {
    }
    var HTMLJeColumnElement: {
        prototype: HTMLJeColumnElement;
        new (): HTMLJeColumnElement;
    };
    interface HTMLJeColumnGroupElement extends Components.JeColumnGroup, HTMLStencilElement {
    }
    var HTMLJeColumnGroupElement: {
        prototype: HTMLJeColumnGroupElement;
        new (): HTMLJeColumnGroupElement;
    };
    interface HTMLJeFormElement extends Components.JeForm, HTMLStencilElement {
    }
    var HTMLJeFormElement: {
        prototype: HTMLJeFormElement;
        new (): HTMLJeFormElement;
    };
    interface HTMLJeIconElement extends Components.JeIcon, HTMLStencilElement {
    }
    var HTMLJeIconElement: {
        prototype: HTMLJeIconElement;
        new (): HTMLJeIconElement;
    };
    interface HTMLJeInfiniteElement extends Components.JeInfinite, HTMLStencilElement {
    }
    var HTMLJeInfiniteElement: {
        prototype: HTMLJeInfiniteElement;
        new (): HTMLJeInfiniteElement;
    };
    interface HTMLJeInputElement extends Components.JeInput, HTMLStencilElement {
    }
    var HTMLJeInputElement: {
        prototype: HTMLJeInputElement;
        new (): HTMLJeInputElement;
    };
    interface HTMLJeItemElement extends Components.JeItem, HTMLStencilElement {
    }
    var HTMLJeItemElement: {
        prototype: HTMLJeItemElement;
        new (): HTMLJeItemElement;
    };
    interface HTMLJeLoadingElement extends Components.JeLoading, HTMLStencilElement {
    }
    var HTMLJeLoadingElement: {
        prototype: HTMLJeLoadingElement;
        new (): HTMLJeLoadingElement;
    };
    interface HTMLJeModalElement extends Components.JeModal, HTMLStencilElement {
    }
    var HTMLJeModalElement: {
        prototype: HTMLJeModalElement;
        new (): HTMLJeModalElement;
    };
    interface HTMLJePageElement extends Components.JePage, HTMLStencilElement {
    }
    var HTMLJePageElement: {
        prototype: HTMLJePageElement;
        new (): HTMLJePageElement;
    };
    interface HTMLJePillElement extends Components.JePill, HTMLStencilElement {
    }
    var HTMLJePillElement: {
        prototype: HTMLJePillElement;
        new (): HTMLJePillElement;
    };
    interface HTMLJePopoverElementEventMap {
        "didPresent": any;
        "didDismiss": { role?: string, data?: any };
    }
    interface HTMLJePopoverElement extends Components.JePopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLJePopoverElementEventMap>(type: K, listener: (this: HTMLJePopoverElement, ev: JePopoverCustomEvent<HTMLJePopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLJePopoverElementEventMap>(type: K, listener: (this: HTMLJePopoverElement, ev: JePopoverCustomEvent<HTMLJePopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLJePopoverElement: {
        prototype: HTMLJePopoverElement;
        new (): HTMLJePopoverElement;
    };
    interface HTMLJeRadioElement extends Components.JeRadio, HTMLStencilElement {
    }
    var HTMLJeRadioElement: {
        prototype: HTMLJeRadioElement;
        new (): HTMLJeRadioElement;
    };
    interface HTMLJeRadioGroupElement extends Components.JeRadioGroup, HTMLStencilElement {
    }
    var HTMLJeRadioGroupElement: {
        prototype: HTMLJeRadioGroupElement;
        new (): HTMLJeRadioGroupElement;
    };
    interface HTMLJeSelectElement extends Components.JeSelect, HTMLStencilElement {
    }
    var HTMLJeSelectElement: {
        prototype: HTMLJeSelectElement;
        new (): HTMLJeSelectElement;
    };
    interface HTMLJeSelectOptionElement extends Components.JeSelectOption, HTMLStencilElement {
    }
    var HTMLJeSelectOptionElement: {
        prototype: HTMLJeSelectOptionElement;
        new (): HTMLJeSelectOptionElement;
    };
    interface HTMLJeSkeletonTextElement extends Components.JeSkeletonText, HTMLStencilElement {
    }
    var HTMLJeSkeletonTextElement: {
        prototype: HTMLJeSkeletonTextElement;
        new (): HTMLJeSkeletonTextElement;
    };
    interface HTMLJeTabElement extends Components.JeTab, HTMLStencilElement {
    }
    var HTMLJeTabElement: {
        prototype: HTMLJeTabElement;
        new (): HTMLJeTabElement;
    };
    interface HTMLJeTabsElement extends Components.JeTabs, HTMLStencilElement {
    }
    var HTMLJeTabsElement: {
        prototype: HTMLJeTabsElement;
        new (): HTMLJeTabsElement;
    };
    interface HTMLJeTextareaElement extends Components.JeTextarea, HTMLStencilElement {
    }
    var HTMLJeTextareaElement: {
        prototype: HTMLJeTextareaElement;
        new (): HTMLJeTextareaElement;
    };
    interface HTMLJeToastElement extends Components.JeToast, HTMLStencilElement {
    }
    var HTMLJeToastElement: {
        prototype: HTMLJeToastElement;
        new (): HTMLJeToastElement;
    };
    interface HTMLJeToggleElement extends Components.JeToggle, HTMLStencilElement {
    }
    var HTMLJeToggleElement: {
        prototype: HTMLJeToggleElement;
        new (): HTMLJeToggleElement;
    };
    interface HTMLJeToolbarElement extends Components.JeToolbar, HTMLStencilElement {
    }
    var HTMLJeToolbarElement: {
        prototype: HTMLJeToolbarElement;
        new (): HTMLJeToolbarElement;
    };
    interface HTMLElementTagNameMap {
        "je-alert": HTMLJeAlertElement;
        "je-button": HTMLJeButtonElement;
        "je-card": HTMLJeCardElement;
        "je-checkbox": HTMLJeCheckboxElement;
        "je-checkbox-group": HTMLJeCheckboxGroupElement;
        "je-checkbox-option": HTMLJeCheckboxOptionElement;
        "je-column": HTMLJeColumnElement;
        "je-column-group": HTMLJeColumnGroupElement;
        "je-form": HTMLJeFormElement;
        "je-icon": HTMLJeIconElement;
        "je-infinite": HTMLJeInfiniteElement;
        "je-input": HTMLJeInputElement;
        "je-item": HTMLJeItemElement;
        "je-loading": HTMLJeLoadingElement;
        "je-modal": HTMLJeModalElement;
        "je-page": HTMLJePageElement;
        "je-pill": HTMLJePillElement;
        "je-popover": HTMLJePopoverElement;
        "je-radio": HTMLJeRadioElement;
        "je-radio-group": HTMLJeRadioGroupElement;
        "je-select": HTMLJeSelectElement;
        "je-select-option": HTMLJeSelectOptionElement;
        "je-skeleton-text": HTMLJeSkeletonTextElement;
        "je-tab": HTMLJeTabElement;
        "je-tabs": HTMLJeTabsElement;
        "je-textarea": HTMLJeTextareaElement;
        "je-toast": HTMLJeToastElement;
        "je-toggle": HTMLJeToggleElement;
        "je-toolbar": HTMLJeToolbarElement;
    }
}
declare namespace LocalJSX {
    interface JeAlert {
    }
    interface JeButton {
        /**
          * Predefined colors
         */
        "color"?: 'primary' | 'secondary' | 'tertiary' | 'success' | 'error' | 'warning' | 'medium' | 'light' | 'dark';
        /**
          * Disables button
         */
        "disabled"?: boolean;
        /**
          * Expands the button to the full width of it's container
         */
        "expand"?: boolean;
        /**
          * Button fill
         */
        "fill"?: 'solid' | 'outline' | 'clear';
        /**
          * Removes the padding, ideal for turning an icon or image into a button
         */
        "iconOnly"?: boolean;
        /**
          * Button size
         */
        "size"?: 'md' | 'lg' | 'sm';
        /**
          * Can set to submit or reset to participate in forms
         */
        "type"?: string;
    }
    interface JeCard {
    }
    interface JeCheckbox {
    }
    interface JeCheckboxGroup {
    }
    interface JeCheckboxOption {
    }
    interface JeColumn {
    }
    interface JeColumnGroup {
    }
    interface JeForm {
    }
    interface JeIcon {
        /**
          * Whether or not the icon should be filled
         */
        "fill"?: boolean;
        /**
          * Icon grade
         */
        "grade"?: number;
        /**
          * Google material icon name
         */
        "icon"?: string;
        /**
          * Size of the icon
         */
        "size"?: 'sm' | 'md' | 'lg' | 'xl';
        /**
          * Icon weight
         */
        "weight"?: number;
    }
    interface JeInfinite {
    }
    interface JeInput {
        "expand"?: boolean;
        "label"?: string;
        "placeholder"?: string;
    }
    interface JeItem {
    }
    interface JeLoading {
    }
    interface JeModal {
    }
    interface JePage {
        "leftPanel"?: PanelState;
        "rightPanel"?: PanelState;
        "theme"?: 'light' | 'dark' | 'auto';
    }
    interface JePill {
    }
    interface JePopover {
        /**
          * Backdrop will dismiss the popover on click when enabled
         */
        "backdropDismiss"?: boolean;
        /**
          * Popover will automatically dismiss itself when something is clicked in the popover when enabled
         */
        "dismissOnClick"?: boolean;
        /**
          * Horizontal offset used when auto positioning the popover content
         */
        "offsetX"?: number;
        /**
          * Vertical offset used when auto positioning the popover content
         */
        "offsetY"?: number;
        /**
          * Emits whenever the popover has finished dismissing. Emits the role and optional data object passed to the dismiss() method.
         */
        "onDidDismiss"?: (event: JePopoverCustomEvent<{ role?: string, data?: any }>) => void;
        /**
          * Emits whenever the popover has presented. Does not emit any data
         */
        "onDidPresent"?: (event: JePopoverCustomEvent<any>) => void;
        /**
          * If the popover should auto position itself using the mouse event or the triggerElement.
         */
        "position"?: 'click' | 'element';
        /**
          * Whether or not the backdrop will be visible to the user
         */
        "showBackdrop"?: boolean;
        /**
          * The id of the element that will present the menu on click. If not provided, you will have to manually present the popover using present().
         */
        "trigger"?: string;
        /**
          * @click Popover will show on left click or tap on mobile.
          * @context-menu Popover will show on right click or press on mobile.
          * @hover Popover will show on hover or tap on mobile. No backdrop will be rendered.
         */
        "triggerAction"?: 'click' | 'hover' | 'context-menu';
    }
    interface JeRadio {
    }
    interface JeRadioGroup {
    }
    interface JeSelect {
    }
    interface JeSelectOption {
    }
    interface JeSkeletonText {
    }
    interface JeTab {
    }
    interface JeTabs {
    }
    interface JeTextarea {
    }
    interface JeToast {
    }
    interface JeToggle {
    }
    interface JeToolbar {
    }
    interface IntrinsicElements {
        "je-alert": JeAlert;
        "je-button": JeButton;
        "je-card": JeCard;
        "je-checkbox": JeCheckbox;
        "je-checkbox-group": JeCheckboxGroup;
        "je-checkbox-option": JeCheckboxOption;
        "je-column": JeColumn;
        "je-column-group": JeColumnGroup;
        "je-form": JeForm;
        "je-icon": JeIcon;
        "je-infinite": JeInfinite;
        "je-input": JeInput;
        "je-item": JeItem;
        "je-loading": JeLoading;
        "je-modal": JeModal;
        "je-page": JePage;
        "je-pill": JePill;
        "je-popover": JePopover;
        "je-radio": JeRadio;
        "je-radio-group": JeRadioGroup;
        "je-select": JeSelect;
        "je-select-option": JeSelectOption;
        "je-skeleton-text": JeSkeletonText;
        "je-tab": JeTab;
        "je-tabs": JeTabs;
        "je-textarea": JeTextarea;
        "je-toast": JeToast;
        "je-toggle": JeToggle;
        "je-toolbar": JeToolbar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "je-alert": LocalJSX.JeAlert & JSXBase.HTMLAttributes<HTMLJeAlertElement>;
            "je-button": LocalJSX.JeButton & JSXBase.HTMLAttributes<HTMLJeButtonElement>;
            "je-card": LocalJSX.JeCard & JSXBase.HTMLAttributes<HTMLJeCardElement>;
            "je-checkbox": LocalJSX.JeCheckbox & JSXBase.HTMLAttributes<HTMLJeCheckboxElement>;
            "je-checkbox-group": LocalJSX.JeCheckboxGroup & JSXBase.HTMLAttributes<HTMLJeCheckboxGroupElement>;
            "je-checkbox-option": LocalJSX.JeCheckboxOption & JSXBase.HTMLAttributes<HTMLJeCheckboxOptionElement>;
            "je-column": LocalJSX.JeColumn & JSXBase.HTMLAttributes<HTMLJeColumnElement>;
            "je-column-group": LocalJSX.JeColumnGroup & JSXBase.HTMLAttributes<HTMLJeColumnGroupElement>;
            "je-form": LocalJSX.JeForm & JSXBase.HTMLAttributes<HTMLJeFormElement>;
            "je-icon": LocalJSX.JeIcon & JSXBase.HTMLAttributes<HTMLJeIconElement>;
            "je-infinite": LocalJSX.JeInfinite & JSXBase.HTMLAttributes<HTMLJeInfiniteElement>;
            "je-input": LocalJSX.JeInput & JSXBase.HTMLAttributes<HTMLJeInputElement>;
            "je-item": LocalJSX.JeItem & JSXBase.HTMLAttributes<HTMLJeItemElement>;
            "je-loading": LocalJSX.JeLoading & JSXBase.HTMLAttributes<HTMLJeLoadingElement>;
            "je-modal": LocalJSX.JeModal & JSXBase.HTMLAttributes<HTMLJeModalElement>;
            "je-page": LocalJSX.JePage & JSXBase.HTMLAttributes<HTMLJePageElement>;
            "je-pill": LocalJSX.JePill & JSXBase.HTMLAttributes<HTMLJePillElement>;
            "je-popover": LocalJSX.JePopover & JSXBase.HTMLAttributes<HTMLJePopoverElement>;
            "je-radio": LocalJSX.JeRadio & JSXBase.HTMLAttributes<HTMLJeRadioElement>;
            "je-radio-group": LocalJSX.JeRadioGroup & JSXBase.HTMLAttributes<HTMLJeRadioGroupElement>;
            "je-select": LocalJSX.JeSelect & JSXBase.HTMLAttributes<HTMLJeSelectElement>;
            "je-select-option": LocalJSX.JeSelectOption & JSXBase.HTMLAttributes<HTMLJeSelectOptionElement>;
            "je-skeleton-text": LocalJSX.JeSkeletonText & JSXBase.HTMLAttributes<HTMLJeSkeletonTextElement>;
            "je-tab": LocalJSX.JeTab & JSXBase.HTMLAttributes<HTMLJeTabElement>;
            "je-tabs": LocalJSX.JeTabs & JSXBase.HTMLAttributes<HTMLJeTabsElement>;
            "je-textarea": LocalJSX.JeTextarea & JSXBase.HTMLAttributes<HTMLJeTextareaElement>;
            "je-toast": LocalJSX.JeToast & JSXBase.HTMLAttributes<HTMLJeToastElement>;
            "je-toggle": LocalJSX.JeToggle & JSXBase.HTMLAttributes<HTMLJeToggleElement>;
            "je-toolbar": LocalJSX.JeToolbar & JSXBase.HTMLAttributes<HTMLJeToolbarElement>;
        }
    }
}
